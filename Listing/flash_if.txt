; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\flash_if.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\flash_if.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -I..\FATFS -I..\IAP -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=537 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\output\flash_if.crf --no_multibyte_chars ..\User\flash_if.c]
                          THUMB

                          AREA ||i.FLASH_If_Erase||, CODE, READONLY, ALIGN=2

                  FLASH_If_Erase PROC
;;;18       */
;;;19     int8_t FLASH_If_Erase(uint32_t StartSector)
000000  b510              PUSH     {r4,lr}
;;;20     {
;;;21       uint32_t FlashAddress;
;;;22       
;;;23       FlashAddress = StartSector;
;;;24     
;;;25       //设备电压范围2.7V-3.6V,字操作 
;;;26      
;;;27       if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
000002  4917              LDR      r1,|L1.96|
000004  4288              CMP      r0,r1
000006  d829              BHI      |L1.92|
;;;28       {
;;;29     	  FLASH_EraseSector(FLASH_Sector_0, VoltageRange_3); // 128 Kbyte
000008  2102              MOVS     r1,#2
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       FLASH_EraseSector
;;;30     	  FLASH_EraseSector(FLASH_Sector_1, VoltageRange_3); // 128 Kbyte
000010  2102              MOVS     r1,#2
000012  2008              MOVS     r0,#8
000014  f7fffffe          BL       FLASH_EraseSector
;;;31     	  FLASH_EraseSector(FLASH_Sector_2, VoltageRange_3); // 128 Kbyte
000018  2102              MOVS     r1,#2
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       FLASH_EraseSector
;;;32     	  FLASH_EraseSector(FLASH_Sector_3, VoltageRange_3); // 128 Kbyte
000020  2102              MOVS     r1,#2
000022  2018              MOVS     r0,#0x18
000024  f7fffffe          BL       FLASH_EraseSector
;;;33     	  FLASH_EraseSector(FLASH_Sector_4, VoltageRange_3); // 128 Kbyte
000028  2102              MOVS     r1,#2
00002a  2020              MOVS     r0,#0x20
00002c  f7fffffe          BL       FLASH_EraseSector
;;;34     	  FLASH_EraseSector(FLASH_Sector_5, VoltageRange_3); // 128 Kbyte
000030  2102              MOVS     r1,#2
000032  2028              MOVS     r0,#0x28
000034  f7fffffe          BL       FLASH_EraseSector
;;;35     	  FLASH_EraseSector(FLASH_Sector_6, VoltageRange_3); // 128 Kbyte
000038  2102              MOVS     r1,#2
00003a  2030              MOVS     r0,#0x30
00003c  f7fffffe          BL       FLASH_EraseSector
;;;36     	  FLASH_EraseSector(FLASH_Sector_7, VoltageRange_3); // 128 Kbyte
000040  2102              MOVS     r1,#2
000042  2038              MOVS     r0,#0x38
000044  f7fffffe          BL       FLASH_EraseSector
;;;37     	  FLASH_EraseSector(FLASH_Sector_8, VoltageRange_3); // 128 Kbyte
000048  2102              MOVS     r1,#2
00004a  2040              MOVS     r0,#0x40
00004c  f7fffffe          BL       FLASH_EraseSector
;;;38     	  FLASH_EraseSector(FLASH_Sector_9, VoltageRange_3); // 128 Kbyte
000050  2102              MOVS     r1,#2
000052  2048              MOVS     r0,#0x48
000054  f7fffffe          BL       FLASH_EraseSector
;;;39     //	  FLASH_EraseSector(FLASH_Sector_18, VoltageRange_3); // 128 Kbyte
;;;40     //	  FLASH_EraseSector(FLASH_Sector_19, VoltageRange_3); // 128 Kbyte
;;;41     //	  FLASH_EraseSector(FLASH_Sector_20, VoltageRange_3); // 128 Kbyte
;;;42     //	  FLASH_EraseSector(FLASH_Sector_21, VoltageRange_3); // 128 Kbyte
;;;43     //	  FLASH_EraseSector(FLASH_Sector_22, VoltageRange_3); // 128 Kbyte
;;;44        // FLASH_EraseSector(FLASH_Sector_6, VoltageRange_3); // 128 Kbyte 
;;;45        //   FLASH_EraseSector(FlashAddress, VoltageRange_3); // 128 Kbyte 
;;;46     //    FLASH_EraseSector(FLASH_Sector_8, VoltageRange_3); // 128 Kbyte 
;;;47     //    FLASH_EraseSector(FLASH_Sector_9, VoltageRange_3); // 128 Kbyte 
;;;48     //    FLASH_EraseSector(FLASH_Sector_10, VoltageRange_3); // 128 Kbyte 
;;;49     //    FLASH_EraseSector(FLASH_Sector_11, VoltageRange_3); // 128 Kbyte   //共896KB
;;;50       }
;;;51       else
;;;52       {
;;;53         return (1);
;;;54       }
;;;55     
;;;56       return (0);
000058  2000              MOVS     r0,#0
;;;57     }
00005a  bd10              POP      {r4,pc}
                  |L1.92|
00005c  2001              MOVS     r0,#1                 ;53
00005e  bd10              POP      {r4,pc}
;;;58     
                          ENDP

                  |L1.96|
                          DCD      0x080e0000

                          AREA ||i.FLASH_If_Init||, CODE, READONLY, ALIGN=1

                  FLASH_If_Init PROC
;;;8        */
;;;9      void FLASH_If_Init(void)
000000  f7ffbffe          B.W      FLASH_Unlock
;;;10     { 
;;;11       FLASH_Unlock(); 
;;;12     }
;;;13     
                          ENDP


                          AREA ||i.FLASH_If_Write||, CODE, READONLY, ALIGN=2

                  FLASH_If_Write PROC
;;;66       */
;;;67     uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint16_t DataLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;68     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;69       uint32_t i = 0;
00000a  2400              MOVS     r4,#0
;;;70     
;;;71       for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
00000c  f8df803c          LDR      r8,|L3.76|
000010  e015              B        |L3.62|
                  |L3.18|
;;;72       {
;;;73         if (FLASH_ProgramWord(*FlashAddress, *(uint32_t*)(Data+i)) == FLASH_COMPLETE)
000012  f8561024          LDR      r1,[r6,r4,LSL #2]
000016  6828              LDR      r0,[r5,#0]
000018  f7fffffe          BL       FLASH_ProgramWord
00001c  2809              CMP      r0,#9
00001e  d002              BEQ      |L3.38|
;;;74         {
;;;75           if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i)) //检查数据写入的一致性
;;;76           {
;;;77             return(2);                             
;;;78           }
;;;79           *FlashAddress += 4;
;;;80         }
;;;81         else
;;;82         {
;;;83           return (1);                                            //写入出错
000020  2001              MOVS     r0,#1
                  |L3.34|
;;;84         }
;;;85       }
;;;86     
;;;87       return (0);
;;;88     }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L3.38|
000026  6828              LDR      r0,[r5,#0]            ;75
000028  f8561024          LDR      r1,[r6,r4,LSL #2]     ;75
00002c  6800              LDR      r0,[r0,#0]            ;75
00002e  4288              CMP      r0,r1                 ;75
000030  d001              BEQ      |L3.54|
000032  2002              MOVS     r0,#2                 ;77
000034  e7f5              B        |L3.34|
                  |L3.54|
000036  6828              LDR      r0,[r5,#0]            ;79
000038  1d00              ADDS     r0,r0,#4              ;79
00003a  6028              STR      r0,[r5,#0]            ;79
00003c  1c64              ADDS     r4,r4,#1              ;71
                  |L3.62|
00003e  42bc              CMP      r4,r7                 ;71
000040  d202              BCS      |L3.72|
000042  6828              LDR      r0,[r5,#0]            ;71
000044  4540              CMP      r0,r8                 ;71
000046  d9e4              BLS      |L3.18|
                  |L3.72|
000048  2000              MOVS     r0,#0                 ;87
00004a  e7ea              B        |L3.34|
;;;89     
                          ENDP

                  |L3.76|
                          DCD      0x080ffffb

                          AREA ||i.IAP_Flash_Write||, CODE, READONLY, ALIGN=1

                  IAP_Flash_Write PROC
;;;111      */
;;;112    uint32_t IAP_Flash_Write(uint32_t addr,uint8_t *pbuf,uint32_t size)
000000  b507              PUSH     {r0-r2,lr}
;;;113    {
;;;114    		uint32_t ret;
;;;115    		ret=FLASH_If_Write(&addr,(uint32_t*)pbuf,size);	
000002  b292              UXTH     r2,r2
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       FLASH_If_Write
;;;116    		return ret;
;;;117    }
00000a  bd0e              POP      {r1-r3,pc}
                          ENDP


                          AREA ||i.IAP_Start||, CODE, READONLY, ALIGN=1

                  IAP_Start PROC
;;;95       */
;;;96     u8 IAP_Start(void)
000000  b510              PUSH     {r4,lr}
;;;97     {
;;;98     	u8 state;
;;;99     	FLASH_Unlock();
000002  f7fffffe          BL       FLASH_Unlock
;;;100    	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
000006  20f3              MOVS     r0,#0xf3
000008  f7fffffe          BL       FLASH_ClearFlag
;;;101                      FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);
;;;102    	state=FLASH_If_Erase(FLASH_Sector_7);//擦除扇区,共128KB
00000c  2038              MOVS     r0,#0x38
00000e  f7fffffe          BL       FLASH_If_Erase
000012  b2c0              UXTB     r0,r0
;;;103      return state;
;;;104    }
000014  bd10              POP      {r4,pc}
;;;105    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\User\\flash_if.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_flash_if_c_79a35935____REV16|
#line 129 "E:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_flash_if_c_79a35935____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_flash_if_c_79a35935____REVSH|
#line 144
|__asm___10_flash_if_c_79a35935____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
